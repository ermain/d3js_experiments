\documentclass[a4paper]{article}

\input{style/common.tex}

\lstset{frame=, basicstyle={\footnotesize\ttfamily}}



\graphicspath{ {images/} }
\usepackage[margin=1in]{geometry}
\usepackage{subcaption}
\usepackage{sectsty}% http://ctan.org/pkg/sectsty
\usepackage{xcolor}% http://ctan.org/pkg/xcolor
\usepackage{setspace}
\definecolor{lit}{HTML}{aa5500}
\allsectionsfont{\color{lit}}
%-----------------------------------------BEGIN DOC----------------------------------------

\begin{document}

%\doublespacing
\title{MedRec}

\begin{titlepage}
\begin{center}

\textsc{\Large MIT 6.830}\\[4em]

\vspace{4em}

\textsc{\huge \textbf{Applying SimpleDB to d3.js}}\\[4em]

\textsc{\large Research}\\[1em]

\textsc{by}\\[1em]

\textsc{\Large Ermain, Nchinda, Teddy}\\[1em]

\end{center}

\vspace*{\fill}
\textsc{MIT 6.830\hspace*{\fill} 2017}

\end{titlepage}
%-----------------------------------------ABSTRACT-------------------------------------
\begin{center}
{\large\bf{Abstract\\}}
\end{center}
abstract stuff
%-----------------------------------------CONTENT-------------------------------------
\tableofcontents\label{c}
\newpage

%----------------------------------------OVERVIEW-----------------------------------------

\section{Introduction} \label{overview}%------------------------------
\subsection{d3.js}
-what is d3
\subsection{Motivation}
-the class and simpledb
-who is holger
\section{Library Analysis}
\subsection{Potential Optimizations}
-we looked at creating an index
-we looked at caching to remove the need to scan the document selector on each call to find elements as is the common paridgm
\subsection{d3 submodules}
We looked through the submodules of d3.js for potential places it could be improved by techniques we learned in 6.830.

Arrays - cross.js, the cross product submodule uses a nested for loop, but to compute cross products which makes sense

Axes - doesn't do anything wilh getting points, just displays data

Chords - don't really think there's much here

Delimiter-Separated Values - only iterates through the elementes of a table

Geographies - this does not use nested loop joins

Hierarchies - this is literally a tri structure, an index on top won't really help

Quadtrees - this is a search library used by other libraries,

Scales- does not work with combining points, uses interpolaters to translate an input into value in a range

Selections - there are nested for loops everywhere

Time Intervals - there are no nested loops here, but maybe for large intervals it would be better to get $O(logn)$ time queries instead of $O(n)$. This isn't our main focus though

Zooming - no nested loops found, likely offloads bulk of processing to quadtrees
-Forces -cross library nested loop join in the way collide computes collisions combined with the way quadtrees gets points
--previously O(n^2) by two loops, now O(nlogn) by one loop and one logn lookup
-Transitions - https://github.com/d3/d3-transition/blob/master/src/transition/select.js we could do something here

<<<<<<< HEAD
\section{d3-selection}
-write about what this library is used for
-it creates a new selection every time it's called, using the 'document' page object to find all the relevant objects
-this could be memoized, using browser localstorage, don't need to reinsert elements that already have been inserted
=======
In addition to evaluating libraries at a high level, we also looked at the perfomance of a piece of sample code using d3.js v4, to try and get an idea of where we might be able to improve performance. (insert link to moving-circle-thing -- should probably move it to some other subdirectory later if we choose to do some other example). In order to get an idea of where the hang-ups in the loading/rendering(?) of the sample code was, we captured a ~1 second profile in Chrome while we moved the mouse around to disturb the circles. [insert pic frame_1_analysis.png here] Most of the frames looked similar at first glance as to what was causing the time-delays, so we focused on one frame to analyze. Overall each frame seems to take about 60-70ms to be calculated and rendered (15 FPS), with half of the time spent calculating the style and the other half in "animation frame fired". The code appears to use a quadtree to store the circles, which makes sense since a quadtree is best used to store objects by position. About 30ms of the animation time was dedicated to traversing the quadtree/doing quadtree-related things; the profiler marked the "force" function (at line 5848) and "apply" function (at line 5868) as big time sinks. This seems like a potential place to use an index. (see some_slowish_code.png)

>>>>>>> 94585507829edb814865810fac29afa1a6fec77a
\section{Improvements}
-make a boolean flag to enable index creation
-create an index based on user provided id for nodes and comparator, when new nodes are added make sure to add them to the index too
\section{Results}
-how does our intersections example run with this new code
\section{Conclusion}

\section{Acknowledgements}


% -----------------------------------REFERENCE----------------------------------------
\begin{thebibliography}{9}
\bibitem{ourrepo} https://github.com/ermain/d3js\_experiments
\bibitem{d3js} https://github.com/d3/d3/blob/master/API.md
\end{thebibliography}

% -----------------------------------Appendix----------------------------------------
\end{document}
